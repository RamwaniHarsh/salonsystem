<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="c:\program files\microsoft visual studio\2022\community\team tools\static analysis tools\fxcop\Xml\CodeAnalysisReport.xsl"?>
<FxCopReport Version="17.0">
 <Targets>
  <Target Name="D:\Anomaly Enterprise\Projects\Windows App\.NET\salonsystem_2\salonsystem (2)\salonsystem\salonsystem\bin\Debug\salonsystem.exe">
   <Modules>
    <Module Name="salonsystem.exe">
     <Namespaces>
      <Namespace Name="salonsystem">
       <Types>
        <Type Name="Frm_Change_Password" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#getdata()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2023-09-14 16:04:08Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="D:\Anomaly Enterprise\Projects\Windows App\.NET\salonsystem_2\salonsystem (2)\salonsystem\salonsystem" File="Frm_Change_Password.vb" Line="101">The query string passed to 'MySqlCommand.New(String)' in 'Frm_Change_Password.getdata()' could contain the following variables 'Me.txtusername.Text'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#txtsecurityans_Leave(System.Object,System.EventArgs)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2023-09-14 16:04:08Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="D:\Anomaly Enterprise\Projects\Windows App\.NET\salonsystem_2\salonsystem (2)\salonsystem\salonsystem" File="Frm_Change_Password.vb" Line="124">The query string passed to 'MySqlCommand.New(String)' in 'Frm_Change_Password.txtsecurityans_Leave(Object, EventArgs)' could contain the following variables 'Me.cmbsecurityq.Text'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#txtusername_Leave(System.Object,System.EventArgs)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2023-09-14 16:04:08Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="D:\Anomaly Enterprise\Projects\Windows App\.NET\salonsystem_2\salonsystem (2)\salonsystem\salonsystem" File="Frm_Change_Password.vb" Line="54">The query string passed to 'MySqlCommand.New(String)' in 'Frm_Change_Password.txtusername_Leave(Object, EventArgs)' could contain the following variables 'Me.txtusername.Text'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#updatepassword()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2023-09-14 16:04:08Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="D:\Anomaly Enterprise\Projects\Windows App\.NET\salonsystem_2\salonsystem (2)\salonsystem\salonsystem" File="Frm_Change_Password.vb" Line="78">The query string passed to 'MySqlCommand.New(String)' in 'Frm_Change_Password.updatepassword()' could contain the following variables 'New String(5)(1)', 'New String(5)(3)'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="frmForgotPassword" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#getdata()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2023-09-14 16:04:08Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="D:\Anomaly Enterprise\Projects\Windows App\.NET\salonsystem_2\salonsystem (2)\salonsystem\salonsystem" File="frmForgotPassword.vb" Line="145">The query string passed to 'MySqlCommand.New(String)' in 'frmForgotPassword.getdata()' could contain the following variables 'Me.txtusername.Text'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#txtsecurityans_Leave(System.Object,System.EventArgs)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2023-09-14 16:04:08Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="D:\Anomaly Enterprise\Projects\Windows App\.NET\salonsystem_2\salonsystem (2)\salonsystem\salonsystem" File="frmForgotPassword.vb" Line="95">The query string passed to 'MySqlCommand.New(String)' in 'frmForgotPassword.txtsecurityans_Leave(Object, EventArgs)' could contain the following variables 'Me.cmbsecurityq.Text'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#txtusername_Leave(System.Object,System.EventArgs)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2023-09-14 16:04:08Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="D:\Anomaly Enterprise\Projects\Windows App\.NET\salonsystem_2\salonsystem (2)\salonsystem\salonsystem" File="frmForgotPassword.vb" Line="54">The query string passed to 'MySqlCommand.New(String)' in 'frmForgotPassword.txtusername_Leave(Object, EventArgs)' could contain the following variables 'Me.txtusername.Text'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#updatepassword()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2023-09-14 16:04:08Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="D:\Anomaly Enterprise\Projects\Windows App\.NET\salonsystem_2\salonsystem (2)\salonsystem\salonsystem" File="frmForgotPassword.vb" Line="123">The query string passed to 'MySqlCommand.New(String)' in 'frmForgotPassword.updatepassword()' could contain the following variables 'New String(5)(1)', 'New String(5)(3)'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="masterDataSet" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementISerializableCorrectly" Category="Microsoft.Usage" CheckId="CA2240" Status="Active" Created="2023-09-14 16:04:08Z" FixCategory="NonBreaking">
           <Issue Certainty="60" Level="Error">Add an implementation of GetObjectData to type 'masterDataSet'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="sendSMS" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#sendOffersSMS(System.String,System.String,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2023-09-14 16:04:08Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="D:\Anomaly Enterprise\Projects\Windows App\.NET\salonsystem_2\salonsystem (2)\salonsystem\salonsystem" File="sendSMS.vb" Line="75">Object 'dataStream' can be disposed more than once in method 'sendSMS.sendOffersSMS(String, String, String)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 75</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="UC_AddProductCategory" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#getdata()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2023-09-14 16:04:08Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="D:\Anomaly Enterprise\Projects\Windows App\.NET\salonsystem_2\salonsystem (2)\salonsystem\salonsystem" File="UC_AddProductCategory.vb" Line="17">The query string passed to 'MySqlCommand.New(String)' in 'UC_AddProductCategory.getdata()' could contain the following variables 'New String(7)(1)', 'New String(7)(3)', 'New String(7)(5)'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="UC_AddProducts" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#getdata()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2023-09-14 16:04:08Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="D:\Anomaly Enterprise\Projects\Windows App\.NET\salonsystem_2\salonsystem (2)\salonsystem\salonsystem" File="UC_AddProducts.vb" Line="23">The query string passed to 'MySqlCommand.New(String)' in 'UC_AddProducts.getdata()' could contain the following variables '"insert into Product values ('" &amp; Me.lblid.Text &amp; "', '" &amp; Me.txtproductname.Text &amp; "','" &amp; Me.cmbProductCat.SelectedItem &amp; "','" &amp; Me.txtPrice.Text &amp; "','" &amp; Me.txtDescription.Text &amp; "')"'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="UC_AddProductStocks" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#addDuplicateStock()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2023-09-14 16:04:08Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="D:\Anomaly Enterprise\Projects\Windows App\.NET\salonsystem_2\salonsystem (2)\salonsystem\salonsystem" File="UC_AddProductStocks.vb" Line="163">The query string passed to 'MySqlCommand.New(String)' in 'UC_AddProductStocks.addDuplicateStock()' could contain the following variables '"select Quantity from Product_Stock Where Product_Name = '" &amp; Me.cmbAddStockProdName.SelectedItem &amp; "'"'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="D:\Anomaly Enterprise\Projects\Windows App\.NET\salonsystem_2\salonsystem (2)\salonsystem\salonsystem" File="UC_AddProductStocks.vb" Line="172">The query string passed to 'MySqlCommand.New(String)' in 'UC_AddProductStocks.addDuplicateStock()' could contain the following variables '"update Product_Stock set Quantity = '" &amp; Conversions.ToString(ans) &amp; "' Where Product_Name = '" &amp; Me.cmbAddStockProdName.SelectedItem &amp; "'"'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddProductStock()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2023-09-14 16:04:08Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="D:\Anomaly Enterprise\Projects\Windows App\.NET\salonsystem_2\salonsystem (2)\salonsystem\salonsystem" File="UC_AddProductStocks.vb" Line="204">The query string passed to 'MySqlCommand.New(String)' in 'UC_AddProductStocks.AddProductStock()' could contain the following variables 'New String(11)(1)', 'New String(11)(3)', 'New String(11)(5)', 'New String(11)(7)', 'New String(11)(9)'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#getCurrQuantity()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2023-09-14 16:04:08Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="D:\Anomaly Enterprise\Projects\Windows App\.NET\salonsystem_2\salonsystem (2)\salonsystem\salonsystem" File="UC_AddProductStocks.vb" Line="102">The query string passed to 'MySqlCommand.New(String)' in 'UC_AddProductStocks.getCurrQuantity()' could contain the following variables 'Me.cmbAddStockProdName.Text'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#getname()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2023-09-14 16:04:08Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="D:\Anomaly Enterprise\Projects\Windows App\.NET\salonsystem_2\salonsystem (2)\salonsystem\salonsystem" File="UC_AddProductStocks.vb" Line="128">The query string passed to 'MySqlCommand.New(String)' in 'UC_AddProductStocks.getname()' could contain the following variables '"select Product_Name From Product_Stock where Product_Name = '" &amp; Me.cmbAddStockProdName.SelectedItem &amp; "'"'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#getProductName()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2023-09-14 16:04:08Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="D:\Anomaly Enterprise\Projects\Windows App\.NET\salonsystem_2\salonsystem (2)\salonsystem\salonsystem" File="UC_AddProductStocks.vb" Line="13">The query string passed to 'MySqlCommand.New(String)' in 'UC_AddProductStocks.getProductName()' could contain the following variables 'Me.cmbAddProdCatStock.Text'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="UC_AddServices" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#getdata()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2023-09-14 16:04:08Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="D:\Anomaly Enterprise\Projects\Windows App\.NET\salonsystem_2\salonsystem (2)\salonsystem\salonsystem" File="UC_AddServices.vb" Line="129">The query string passed to 'MySqlCommand.New(String)' in 'UC_AddServices.getdata()' could contain the following variables 'New String(7)(1)', 'New String(7)(3)', 'New String(7)(5)'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#kacharaseth()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2023-09-14 16:04:08Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="D:\Anomaly Enterprise\Projects\Windows App\.NET\salonsystem_2\salonsystem (2)\salonsystem\salonsystem" File="UC_AddServices.vb" Line="78">The query string passed to 'MySqlCommand.New(String, MySqlConnection)' in 'UC_AddServices.kacharaseth()' could contain the following variables 'Conversions.ToString(Me.Bill_No)'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="UC_AddSubService" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#getdata()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2023-09-14 16:04:08Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="D:\Anomaly Enterprise\Projects\Windows App\.NET\salonsystem_2\salonsystem (2)\salonsystem\salonsystem" File="UC_AddSubService.vb" Line="105">The query string passed to 'MySqlCommand.New(String)' in 'UC_AddSubService.getdata()' could contain the following variables '"insert into Sub_Services values ('" &amp; Me.lblid.Text &amp; "','" &amp; Me.txtsubservicename.Text &amp; "','" &amp; Me.cmbservicename.SelectedItem &amp; " ','" &amp; Me.txtPrice.Text &amp; "','" &amp; Me.txtDescription.Text &amp; "')"'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#kacharaseth()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2023-09-14 16:04:08Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="D:\Anomaly Enterprise\Projects\Windows App\.NET\salonsystem_2\salonsystem (2)\salonsystem\salonsystem" File="UC_AddSubService.vb" Line="73">The query string passed to 'MySqlCommand.New(String, MySqlConnection)' in 'UC_AddSubService.kacharaseth()' could contain the following variables 'Conversions.ToString(Me.Bill_No)'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="UC_Home" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#getdailysales()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2023-09-14 16:04:08Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="D:\Anomaly Enterprise\Projects\Windows App\.NET\salonsystem_2\salonsystem (2)\salonsystem\salonsystem" File="UC_Home.vb" Line="86">The query string passed to 'MySqlCommand.New(String)' in 'UC_Home.getdailysales()' could contain the following variables 'Me.ddmmyy'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#getweeklysales()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2023-09-14 16:04:08Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="D:\Anomaly Enterprise\Projects\Windows App\.NET\salonsystem_2\salonsystem (2)\salonsystem\salonsystem" File="UC_Home.vb" Line="69">The query string passed to 'MySqlCommand.New(String)' in 'UC_Home.getweeklysales()' could contain the following variables 'Conversions.ToString(startdate)', 'Conversions.ToString(Enddate)'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="UC_NewCustomer" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#addcustomer()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2023-09-14 16:04:08Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="D:\Anomaly Enterprise\Projects\Windows App\.NET\salonsystem_2\salonsystem (2)\salonsystem\salonsystem" File="UC_NewCustomer.vb" Line="92">The query string passed to 'MySqlCommand.New(String)' in 'UC_NewCustomer.addcustomer()' could contain the following variables 'New String(17)(1)', 'New String(17)(3)', 'New String(17)(5)', 'New String(17)(9)', 'New String(17)(11)', 'New String(17)(13)', 'New String(17)(15)'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="UC_NewEmployee" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#getdata()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2023-09-14 16:04:08Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="D:\Anomaly Enterprise\Projects\Windows App\.NET\salonsystem_2\salonsystem (2)\salonsystem\salonsystem" File="UC_NewEmployee.vb" Line="50">The query string passed to 'MySqlCommand.New(String)' in 'UC_NewEmployee.getdata()' could contain the following variables 'New String(17)(1)', 'New String(17)(3)', 'New String(17)(5)', 'New String(17)(9)', 'New String(17)(11)', 'New String(17)(15)'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="UC_NewUser" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#AddUser()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2023-09-14 16:04:08Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="D:\Anomaly Enterprise\Projects\Windows App\.NET\salonsystem_2\salonsystem (2)\salonsystem\salonsystem" File="UC_NewUser.vb" Line="12">The query string passed to 'MySqlCommand.New(String)' in 'UC_NewUser.AddUser()' could contain the following variables 'New String(9)(1)', 'New String(9)(3)', 'New String(9)(5)', 'New String(9)(7)'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="UC_ProductSales" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#getamount()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2023-09-14 16:04:08Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="D:\Anomaly Enterprise\Projects\Windows App\.NET\salonsystem_2\salonsystem (2)\salonsystem\salonsystem" File="UC_ProductSales.vb" Line="266">The query string passed to 'MySqlCommand.New(String)' in 'UC_ProductSales.getamount()' could contain the following variables 'Me.cmbProdSalesSelectProdName.Text'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#getbillno()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2023-09-14 16:04:08Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="D:\Anomaly Enterprise\Projects\Windows App\.NET\salonsystem_2\salonsystem (2)\salonsystem\salonsystem" File="UC_ProductSales.vb" Line="125">The query string passed to 'MySqlCommand.New(String)' in 'UC_ProductSales.getbillno()' could contain the following variables 'Me.cmbProdSalesSelectProdName.Text'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#getDetails1()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2023-09-14 16:04:08Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="D:\Anomaly Enterprise\Projects\Windows App\.NET\salonsystem_2\salonsystem (2)\salonsystem\salonsystem" File="UC_ProductSales.vb" Line="377">Object 'conn' can be disposed more than once in method 'UC_ProductSales.getDetails1()'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 377</Issue>
            </Message>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2023-09-14 16:04:08Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="D:\Anomaly Enterprise\Projects\Windows App\.NET\salonsystem_2\salonsystem (2)\salonsystem\salonsystem" File="UC_ProductSales.vb" Line="368">The query string passed to 'MySqlCommand.New(String)' in 'UC_ProductSales.getDetails1()' could contain the following variables '"insert into Product_Sales_Details values ('" &amp; Me.dtgcurrcart.Rows(i).Cells(0).Value &amp; "','" &amp; Me.dtgcurrcart.Rows(i).Cells(1).Value &amp; "','" &amp; Me.dtgcurrcart.Rows(i).Cells(2).Value &amp; "','" &amp; Me.dtgcurrcart.Rows(i).Cells(3).Value &amp; "','" &amp; Me.dtgcurrcart.Rows(i).Cells(4).Value &amp; "','" &amp; Me.dtgcurrcart.Rows(i).Cells(5).Value &amp; "')"'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#getmaster()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2023-09-14 16:04:08Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="D:\Anomaly Enterprise\Projects\Windows App\.NET\salonsystem_2\salonsystem (2)\salonsystem\salonsystem" File="UC_ProductSales.vb" Line="389">The query string passed to 'MySqlCommand.New(String)' in 'UC_ProductSales.getmaster()' could contain the following variables 'New String(11)(1)', 'New String(11)(3)', 'New String(11)(5)', 'New String(11)(7)', 'New String(11)(9)'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#getproductname()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2023-09-14 16:04:08Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="D:\Anomaly Enterprise\Projects\Windows App\.NET\salonsystem_2\salonsystem (2)\salonsystem\salonsystem" File="UC_ProductSales.vb" Line="214">The query string passed to 'MySqlCommand.New(String)' in 'UC_ProductSales.getproductname()' could contain the following variables 'Me.cmbProdSalesSelectProdCat.Text'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#getQuantity()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2023-09-14 16:04:08Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="D:\Anomaly Enterprise\Projects\Windows App\.NET\salonsystem_2\salonsystem (2)\salonsystem\salonsystem" File="UC_ProductSales.vb" Line="286">The query string passed to 'MySqlCommand.New(String)' in 'UC_ProductSales.getQuantity()' could contain the following variables 'Me.cmbProdSalesSelectProdName.Text'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#kacharaseth()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2023-09-14 16:04:08Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="D:\Anomaly Enterprise\Projects\Windows App\.NET\salonsystem_2\salonsystem (2)\salonsystem\salonsystem" File="UC_ProductSales.vb" Line="179">The query string passed to 'MySqlCommand.New(String, MySqlConnection)' in 'UC_ProductSales.kacharaseth()' could contain the following variables 'Conversions.ToString(Me.billno)'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Kacharaseth2()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2023-09-14 16:04:08Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="D:\Anomaly Enterprise\Projects\Windows App\.NET\salonsystem_2\salonsystem (2)\salonsystem\salonsystem" File="UC_ProductSales.vb" Line="156">The query string passed to 'MySqlCommand.New(String, MySqlConnection)' in 'UC_ProductSales.Kacharaseth2()' could contain the following variables 'Me.cmbProdSalesSearchCusName.Text'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#updatequantity()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2023-09-14 16:04:08Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="D:\Anomaly Enterprise\Projects\Windows App\.NET\salonsystem_2\salonsystem (2)\salonsystem\salonsystem" File="UC_ProductSales.vb" Line="477">Object 'conn' can be disposed more than once in method 'UC_ProductSales.updatequantity()'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 477</Issue>
            </Message>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2023-09-14 16:04:08Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="D:\Anomaly Enterprise\Projects\Windows App\.NET\salonsystem_2\salonsystem (2)\salonsystem\salonsystem" File="UC_ProductSales.vb" Line="468">The query string passed to 'MySqlCommand.New(String)' in 'UC_ProductSales.updatequantity()' could contain the following variables '"Update Product_Stock set Quantity = '" &amp; Conversions.ToString(ans_qnt) &amp; "' where Product_Name = '" &amp; Me.dtgcurrcart.Rows(i).Cells(3).Value &amp; "'"'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="D:\Anomaly Enterprise\Projects\Windows App\.NET\salonsystem_2\salonsystem (2)\salonsystem\salonsystem" File="UC_ProductSales.vb" Line="452">The query string passed to 'MySqlCommand.New(String, MySqlConnection)' in 'UC_ProductSales.updatequantity()' could contain the following variables '"Select Quantity from Product_Stock where Product_Name = '" &amp; Me.dtgcurrcart.Rows(i).Cells(3).Value &amp; "'"'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="UC_ProductSalesReports" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#getbill()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2023-09-14 16:04:08Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="D:\Anomaly Enterprise\Projects\Windows App\.NET\salonsystem_2\salonsystem (2)\salonsystem\salonsystem" File="UC_ProductSalesReports.vb" Line="73">The query string passed to 'MySqlCommand.New(String)' in 'UC_ProductSalesReports.getbill()' could contain the following variables 'Me.txtCusProdReportBillNo.Text'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#getcustomerdetails()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2023-09-14 16:04:08Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="D:\Anomaly Enterprise\Projects\Windows App\.NET\salonsystem_2\salonsystem (2)\salonsystem\salonsystem" File="UC_ProductSalesReports.vb" Line="136">The query string passed to 'MySqlCommand.New(String)' in 'UC_ProductSalesReports.getcustomerdetails()' could contain the following variables 'Me.txtCusProdReportBillNo.Text'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#getdata()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2023-09-14 16:04:08Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="D:\Anomaly Enterprise\Projects\Windows App\.NET\salonsystem_2\salonsystem (2)\salonsystem\salonsystem" File="UC_ProductSalesReports.vb" Line="106">The query string passed to 'MySqlCommand.New(String)' in 'UC_ProductSalesReports.getdata()' could contain the following variables 'Me.txtCusProdReportBillNo.Text'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="UC_ServiceSalesReport" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#getaddrees()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2023-09-14 16:04:08Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="D:\Anomaly Enterprise\Projects\Windows App\.NET\salonsystem_2\salonsystem (2)\salonsystem\salonsystem" File="UC_ServiceSalesReport.vb" Line="22">The query string passed to 'MySqlCommand.New(String)' in 'UC_ServiceSalesReport.getaddrees()' could contain the following variables 'Conversions.ToString(Me.mobile)'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#getbill()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2023-09-14 16:04:08Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="D:\Anomaly Enterprise\Projects\Windows App\.NET\salonsystem_2\salonsystem (2)\salonsystem\salonsystem" File="UC_ServiceSalesReport.vb" Line="63">The query string passed to 'MySqlCommand.New(String)' in 'UC_ServiceSalesReport.getbill()' could contain the following variables 'Me.txtCusServReportBillNo.Text'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#getcustomerdetails()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2023-09-14 16:04:08Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="D:\Anomaly Enterprise\Projects\Windows App\.NET\salonsystem_2\salonsystem (2)\salonsystem\salonsystem" File="UC_ServiceSalesReport.vb" Line="42">The query string passed to 'MySqlCommand.New(String)' in 'UC_ServiceSalesReport.getcustomerdetails()' could contain the following variables 'Me.txtCusServReportBillNo.Text'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#getdata()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2023-09-14 16:04:08Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="D:\Anomaly Enterprise\Projects\Windows App\.NET\salonsystem_2\salonsystem (2)\salonsystem\salonsystem" File="UC_ServiceSalesReport.vb" Line="95">The query string passed to 'MySqlCommand.New(String)' in 'UC_ServiceSalesReport.getdata()' could contain the following variables 'Me.txtCusServReportBillNo.Text'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="UC_ServicesSales" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#getbirthdate()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2023-09-14 16:04:08Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="D:\Anomaly Enterprise\Projects\Windows App\.NET\salonsystem_2\salonsystem (2)\salonsystem\salonsystem" File="UC_ServicesSales.vb" Line="210">The query string passed to 'MySqlCommand.New(String, MySqlConnection)' in 'UC_ServicesSales.getbirthdate()' could contain the following variables 'Me.cmbServSalesSearchCusName.Text'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#getrate()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2023-09-14 16:04:08Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="D:\Anomaly Enterprise\Projects\Windows App\.NET\salonsystem_2\salonsystem (2)\salonsystem\salonsystem" File="UC_ServicesSales.vb" Line="297">The query string passed to 'MySqlCommand.New(String)' in 'UC_ServicesSales.getrate()' could contain the following variables 'Me.cmbServSalesSelectSubServ.Text'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#getServiceDetails()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2023-09-14 16:04:08Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="D:\Anomaly Enterprise\Projects\Windows App\.NET\salonsystem_2\salonsystem (2)\salonsystem\salonsystem" File="UC_ServicesSales.vb" Line="328">Object 'conn' can be disposed more than once in method 'UC_ServicesSales.getServiceDetails()'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 328</Issue>
            </Message>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2023-09-14 16:04:08Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="D:\Anomaly Enterprise\Projects\Windows App\.NET\salonsystem_2\salonsystem (2)\salonsystem\salonsystem" File="UC_ServicesSales.vb" Line="319">The query string passed to 'MySqlCommand.New(String)' in 'UC_ServicesSales.getServiceDetails()' could contain the following variables '"insert into Service_Sales_Details values ('" &amp; Me.dtgcurrcart.Rows(i).Cells(0).Value &amp; "','" &amp; Me.dtgcurrcart.Rows(i).Cells(1).Value &amp; "','" &amp; Me.dtgcurrcart.Rows(i).Cells(2).Value &amp; "','" &amp; Me.dtgcurrcart.Rows(i).Cells(3).Value &amp; "','" &amp; Me.dtgcurrcart.Rows(i).Cells(4).Value &amp; "','" &amp; Me.dtgcurrcart.Rows(i).Cells(5).Value &amp; "','" &amp; Me.dtgcurrcart.Rows(i).Cells(6).Value &amp; "')"'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#getServicemaster()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2023-09-14 16:04:08Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="D:\Anomaly Enterprise\Projects\Windows App\.NET\salonsystem_2\salonsystem (2)\salonsystem\salonsystem" File="UC_ServicesSales.vb" Line="345">The query string passed to 'MySqlCommand.New(String)' in 'UC_ServicesSales.getServicemaster()' could contain the following variables 'New String(11)(1)', 'New String(11)(3)', 'New String(11)(5)', 'New String(11)(7)', 'Me.address'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#getsubService()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2023-09-14 16:04:08Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="D:\Anomaly Enterprise\Projects\Windows App\.NET\salonsystem_2\salonsystem (2)\salonsystem\salonsystem" File="UC_ServicesSales.vb" Line="136">The query string passed to 'MySqlCommand.New(String)' in 'UC_ServicesSales.getsubService()' could contain the following variables 'Me.cmbServSalesSelectService.Text'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#kacharaseth()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2023-09-14 16:04:08Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="D:\Anomaly Enterprise\Projects\Windows App\.NET\salonsystem_2\salonsystem (2)\salonsystem\salonsystem" File="UC_ServicesSales.vb" Line="250">The query string passed to 'MySqlCommand.New(String, MySqlConnection)' in 'UC_ServicesSales.kacharaseth()' could contain the following variables 'Conversions.ToString(Me.bill)'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#kacharaseth2()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2023-09-14 16:04:08Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="D:\Anomaly Enterprise\Projects\Windows App\.NET\salonsystem_2\salonsystem (2)\salonsystem\salonsystem" File="UC_ServicesSales.vb" Line="227">The query string passed to 'MySqlCommand.New(String, MySqlConnection)' in 'UC_ServicesSales.kacharaseth2()' could contain the following variables 'Me.cmbServSalesSearchCusName.Text'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="UC_UpdateCustomer" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#getdata()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2023-09-14 16:04:08Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="D:\Anomaly Enterprise\Projects\Windows App\.NET\salonsystem_2\salonsystem (2)\salonsystem\salonsystem" File="UC_UpdateCustomer.vb" Line="181">The query string passed to 'MySqlCommand.New(String)' in 'UC_UpdateCustomer.getdata()' could contain the following variables '"Update Customer set First_Name='" &amp; Me.txtfname.Text &amp; "',Last_Name='" &amp; Me.txtlname.Text &amp; "',Gender = '" &amp; gender &amp; "',Date_of_Birth= '" &amp; Local5.ToString("dd/MM/yyyy") &amp; "',Mobile_Number = '" &amp; Me.txtmobile.Text &amp; "',Address = '" &amp; Me.txtaddress.Text &amp; "' where First_Name = '" &amp; Me.cmbname.SelectedItem &amp; "'"'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="UC_UpdateEmplyee" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#getdata()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2023-09-14 16:04:08Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="D:\Anomaly Enterprise\Projects\Windows App\.NET\salonsystem_2\salonsystem (2)\salonsystem\salonsystem" File="UC_UpdateEmplyee.vb" Line="230">The query string passed to 'MySqlCommand.New(String)' in 'UC_UpdateEmplyee.getdata()' could contain the following variables '"Update Employee set First_Name='" &amp; Me.txtfname.Text &amp; "',Last_Name='" &amp; Me.txtlname.Text &amp; "',Gender = '" &amp; gender &amp; "',Date_of_Birth= '" &amp; Local13.ToString("dd/MM/yyyy") &amp; "',Mobile_Number = '" &amp; Me.txtmobile.Text &amp; "',Ability = '" &amp; Me.ability &amp; "',Address = '" &amp; Me.txtaddress.Text &amp; "' where First_Name = '" &amp; Me.cmbname.SelectedItem &amp; "'"'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#local()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2023-09-14 16:04:08Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="D:\Anomaly Enterprise\Projects\Windows App\.NET\salonsystem_2\salonsystem (2)\salonsystem\salonsystem" File="UC_UpdateEmplyee.vb" Line="24">The query string passed to 'MySqlCommand.New(String)' in 'UC_UpdateEmplyee.local()' could contain the following variables '"Update Employee set First_Name='" &amp; Me.txtfname.Text &amp; "',Last_Name='" &amp; Me.txtlname.Text &amp; "',Gender = '" &amp; gender &amp; "',Date_of_Birth= '" &amp; Local5.ToString("dd/MM/yyyy") &amp; "',Mobile_Number = '" &amp; Me.txtmobile.Text &amp; "',Ability = '" &amp; Me.ability &amp; "',Address = '" &amp; Me.txtaddress.Text &amp; "' where First_Name = '" &amp; Me.cmbname.SelectedItem &amp; "'"'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="UC_UpdateProduct" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#updatedata()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2023-09-14 16:04:08Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="D:\Anomaly Enterprise\Projects\Windows App\.NET\salonsystem_2\salonsystem (2)\salonsystem\salonsystem" File="UC_UpdateProduct.vb" Line="75">The query string passed to 'MySqlCommand.New(String)' in 'UC_UpdateProduct.updatedata()' could contain the following variables '"Update Product set Product_Name='" &amp; Me.txtproductname.Text &amp; "',Product_Category='" &amp; Me.cmbProductCategory.SelectedItem &amp; "',Rate = '" &amp; Me.txtprice.Text &amp; "',Description = '" &amp; Me.txtdescription.Text &amp; "' where Product_Name = '" &amp; Me.cmbproductname.SelectedItem &amp; "'"'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="UC_UpdateProductCategory" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#updatedata()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2023-09-14 16:04:08Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="D:\Anomaly Enterprise\Projects\Windows App\.NET\salonsystem_2\salonsystem (2)\salonsystem\salonsystem" File="UC_UpdateProductCategory.vb" Line="17">The query string passed to 'MySqlCommand.New(String)' in 'UC_UpdateProductCategory.updatedata()' could contain the following variables '"Update Product_Category set Category_Name='" &amp; Me.txtcatname.Text &amp; "',Description='" &amp; Me.txtcatdesc.Text &amp; "' where Category_Name = '" &amp; Me.cmbIdProductCat.SelectedItem &amp; "'"'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="UC_UpdateProductStock" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#getCurrQuantity()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2023-09-14 16:04:08Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="D:\Anomaly Enterprise\Projects\Windows App\.NET\salonsystem_2\salonsystem (2)\salonsystem\salonsystem" File="UC_UpdateProductStock.vb" Line="29">The query string passed to 'MySqlCommand.New(String)' in 'UC_UpdateProductStock.getCurrQuantity()' could contain the following variables '"SELECT Quantity from Product_Stock where Product_Name = '" &amp; Me.cmbUpdaStockProdName.SelectedItem &amp; "'"'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#getdetails()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2023-09-14 16:04:08Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="D:\Anomaly Enterprise\Projects\Windows App\.NET\salonsystem_2\salonsystem (2)\salonsystem\salonsystem" File="UC_UpdateProductStock.vb" Line="121">The query string passed to 'MySqlCommand.New(String)' in 'UC_UpdateProductStock.getdetails()' could contain the following variables 'New String(11)(1)', 'New String(11)(3)', 'New String(11)(5)', 'New String(11)(7)', 'New String(11)(9)'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#getProductName()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2023-09-14 16:04:08Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="D:\Anomaly Enterprise\Projects\Windows App\.NET\salonsystem_2\salonsystem (2)\salonsystem\salonsystem" File="UC_UpdateProductStock.vb" Line="14">The query string passed to 'MySqlCommand.New(String)' in 'UC_UpdateProductStock.getProductName()' could contain the following variables '"SELECT Product_Name from Product_Stock where Product_Category = '" &amp; Me.cmbUpdaProdCatStock.SelectedItem &amp; "'"'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#getstockid()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2023-09-14 16:04:08Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="D:\Anomaly Enterprise\Projects\Windows App\.NET\salonsystem_2\salonsystem (2)\salonsystem\salonsystem" File="UC_UpdateProductStock.vb" Line="50">The query string passed to 'MySqlCommand.New(String)' in 'UC_UpdateProductStock.getstockid()' could contain the following variables '"SELECT Stock_Id from Product_Stock Where Product_Name = '" &amp; Me.cmbUpdaStockProdName.SelectedItem &amp; "'"'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="UC_UpdateService" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#getdata()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2023-09-14 16:04:08Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="D:\Anomaly Enterprise\Projects\Windows App\.NET\salonsystem_2\salonsystem (2)\salonsystem\salonsystem" File="UC_UpdateService.vb" Line="97">The query string passed to 'MySqlCommand.New(String)' in 'UC_UpdateService.getdata()' could contain the following variables '"Update Services set Service_Name='" &amp; Me.txtservicename.Text &amp; "',Description='" &amp; Me.txtdesc.Text &amp; "' where Service_Name = '" &amp; Me.cmbServiceName.SelectedItem &amp; "'"'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#kacharaseth()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2023-09-14 16:04:08Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="D:\Anomaly Enterprise\Projects\Windows App\.NET\salonsystem_2\salonsystem (2)\salonsystem\salonsystem" File="UC_UpdateService.vb" Line="69">The query string passed to 'MySqlCommand.New(String, MySqlConnection)' in 'UC_UpdateService.kacharaseth()' could contain the following variables 'Conversions.ToString(Me.Bill_No)'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="UC_UpdateSubServices" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#btnadd_Click(System.Object,System.EventArgs)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2023-09-14 16:04:08Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="D:\Anomaly Enterprise\Projects\Windows App\.NET\salonsystem_2\salonsystem (2)\salonsystem\salonsystem" File="UC_UpdateSubServices.vb" Line="204">The query string passed to 'MySqlCommand.New(String)' in 'UC_UpdateSubServices.btnadd_Click(Object, EventArgs)' could contain the following variables '"Update Sub_Services set Sub_Service_Name='" &amp; Me.txtsubservicename.Text &amp; "',Service_Name='" &amp; Me.cmbServiceName.SelectedItem &amp; "',Price='" &amp; Me.txtprice.Text &amp; "',Description='" &amp; Me.txtdesc.Text &amp; "' where Sub_Service_Name = '" &amp; Me.cmbSubServiceName.Text &amp; "'"'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#kacharaseth()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2023-09-14 16:04:08Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="D:\Anomaly Enterprise\Projects\Windows App\.NET\salonsystem_2\salonsystem (2)\salonsystem\salonsystem" File="UC_UpdateSubServices.vb" Line="71">The query string passed to 'MySqlCommand.New(String, MySqlConnection)' in 'UC_UpdateSubServices.kacharaseth()' could contain the following variables 'Conversions.ToString(Me.Bill_No)'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="UC_ViewCustomer" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#txtmobile_TextChanged(System.Object,System.EventArgs)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2023-09-14 16:04:08Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="D:\Anomaly Enterprise\Projects\Windows App\.NET\salonsystem_2\salonsystem (2)\salonsystem\salonsystem" File="UC_ViewCustomer.vb" Line="17">The query string passed to 'MySqlDataAdapter.New(String, MySqlConnection)' in 'UC_ViewCustomer.txtmobile_TextChanged(Object, EventArgs)' could contain the following variables 'Me.txtmobile.Text'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#txtname_TextChanged(System.Object,System.EventArgs)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2023-09-14 16:04:08Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="D:\Anomaly Enterprise\Projects\Windows App\.NET\salonsystem_2\salonsystem (2)\salonsystem\salonsystem" File="UC_ViewCustomer.vb" Line="7">The query string passed to 'MySqlDataAdapter.New(String, MySqlConnection)' in 'UC_ViewCustomer.txtname_TextChanged(Object, EventArgs)' could contain the following variables 'Me.txtname.Text'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="UC_ViewEmployee" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#txtmobile_TextChanged(System.Object,System.EventArgs)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2023-09-14 16:04:08Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="D:\Anomaly Enterprise\Projects\Windows App\.NET\salonsystem_2\salonsystem (2)\salonsystem\salonsystem" File="UC_ViewEmployee.vb" Line="20">The query string passed to 'MySqlDataAdapter.New(String, MySqlConnection)' in 'UC_ViewEmployee.txtmobile_TextChanged(Object, EventArgs)' could contain the following variables 'Me.txtmobile.Text'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#txtname_TextChanged(System.Object,System.EventArgs)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2023-09-14 16:04:08Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="D:\Anomaly Enterprise\Projects\Windows App\.NET\salonsystem_2\salonsystem (2)\salonsystem\salonsystem" File="UC_ViewEmployee.vb" Line="10">The query string passed to 'MySqlDataAdapter.New(String, MySqlConnection)' in 'UC_ViewEmployee.txtname_TextChanged(Object, EventArgs)' could contain the following variables 'Me.txtname.Text'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="UC_ViewProduct" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#txtid_TextChanged(System.Object,System.EventArgs)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2023-09-14 16:04:08Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="D:\Anomaly Enterprise\Projects\Windows App\.NET\salonsystem_2\salonsystem (2)\salonsystem\salonsystem" File="UC_ViewProduct.vb" Line="16">The query string passed to 'MySqlDataAdapter.New(String, MySqlConnection)' in 'UC_ViewProduct.txtid_TextChanged(Object, EventArgs)' could contain the following variables 'Me.txtid.Text'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#txtname_TextChanged(System.Object,System.EventArgs)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2023-09-14 16:04:08Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="D:\Anomaly Enterprise\Projects\Windows App\.NET\salonsystem_2\salonsystem (2)\salonsystem\salonsystem" File="UC_ViewProduct.vb" Line="7">The query string passed to 'MySqlDataAdapter.New(String, MySqlConnection)' in 'UC_ViewProduct.txtname_TextChanged(Object, EventArgs)' could contain the following variables 'Me.txtname.Text'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="UC_ViewProductCategory" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#txtid_TextChanged(System.Object,System.EventArgs)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2023-09-14 16:04:08Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="D:\Anomaly Enterprise\Projects\Windows App\.NET\salonsystem_2\salonsystem (2)\salonsystem\salonsystem" File="UC_ViewProductCategory.vb" Line="17">The query string passed to 'MySqlDataAdapter.New(String, MySqlConnection)' in 'UC_ViewProductCategory.txtid_TextChanged(Object, EventArgs)' could contain the following variables 'Me.txtid.Text'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#txtname_TextChanged(System.Object,System.EventArgs)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2023-09-14 16:04:08Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="D:\Anomaly Enterprise\Projects\Windows App\.NET\salonsystem_2\salonsystem (2)\salonsystem\salonsystem" File="UC_ViewProductCategory.vb" Line="7">The query string passed to 'MySqlDataAdapter.New(String, MySqlConnection)' in 'UC_ViewProductCategory.txtname_TextChanged(Object, EventArgs)' could contain the following variables 'Me.txtname.Text'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="UC_ViewProductStock" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#txtid_TextChanged(System.Object,System.EventArgs)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2023-09-14 16:04:08Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="D:\Anomaly Enterprise\Projects\Windows App\.NET\salonsystem_2\salonsystem (2)\salonsystem\salonsystem" File="UC_ViewProductStock.vb" Line="17">The query string passed to 'MySqlDataAdapter.New(String, MySqlConnection)' in 'UC_ViewProductStock.txtid_TextChanged(Object, EventArgs)' could contain the following variables 'Me.txtid.Text'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#txtname_TextChanged(System.Object,System.EventArgs)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2023-09-14 16:04:08Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="D:\Anomaly Enterprise\Projects\Windows App\.NET\salonsystem_2\salonsystem (2)\salonsystem\salonsystem" File="UC_ViewProductStock.vb" Line="7">The query string passed to 'MySqlDataAdapter.New(String, MySqlConnection)' in 'UC_ViewProductStock.txtname_TextChanged(Object, EventArgs)' could contain the following variables 'Me.txtname.Text'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="UC_ViewServices" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#txtid_TextChanged(System.Object,System.EventArgs)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2023-09-14 16:04:08Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="D:\Anomaly Enterprise\Projects\Windows App\.NET\salonsystem_2\salonsystem (2)\salonsystem\salonsystem" File="UC_ViewServices.vb" Line="17">The query string passed to 'MySqlDataAdapter.New(String, MySqlConnection)' in 'UC_ViewServices.txtid_TextChanged(Object, EventArgs)' could contain the following variables 'Me.txtid.Text'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#txtname_TextChanged(System.Object,System.EventArgs)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2023-09-14 16:04:08Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="D:\Anomaly Enterprise\Projects\Windows App\.NET\salonsystem_2\salonsystem (2)\salonsystem\salonsystem" File="UC_ViewServices.vb" Line="7">The query string passed to 'MySqlDataAdapter.New(String, MySqlConnection)' in 'UC_ViewServices.txtname_TextChanged(Object, EventArgs)' could contain the following variables 'Me.txtname.Text'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="UC_ViewSubServices" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#txtid_TextChanged(System.Object,System.EventArgs)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2023-09-14 16:04:08Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="D:\Anomaly Enterprise\Projects\Windows App\.NET\salonsystem_2\salonsystem (2)\salonsystem\salonsystem" File="UC_ViewSubServices.vb" Line="21">The query string passed to 'MySqlDataAdapter.New(String, MySqlConnection)' in 'UC_ViewSubServices.txtid_TextChanged(Object, EventArgs)' could contain the following variables 'Me.txtid.Text'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#txtname_TextChanged(System.Object,System.EventArgs)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2023-09-14 16:04:08Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="D:\Anomaly Enterprise\Projects\Windows App\.NET\salonsystem_2\salonsystem (2)\salonsystem\salonsystem" File="UC_ViewSubServices.vb" Line="11">The query string passed to 'MySqlDataAdapter.New(String, MySqlConnection)' in 'UC_ViewSubServices.txtname_TextChanged(Object, EventArgs)' could contain the following variables 'Me.txtname.Text'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
 </Targets>
 <Rules>
  <Rule TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202">
   <Name>Do not dispose objects multiple times</Name>
   <Description>A correctly implemented Dispose method can be called multiple times without throwing an exception. However, this is not guaranteed and to avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.</Description>
   <Resolution Name="Default">Object {0} can be disposed more than once in method {1}. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 328</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/ms182334.aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="17.0.0.0" />
  </Rule>
  <Rule TypeName="ImplementISerializableCorrectly" Category="Microsoft.Usage" CheckId="CA2240">
   <Name>Implement ISerializable correctly</Name>
   <Description>If a type is assignable to ISerializable, it should implement GetObjectData. For unsealed types, the GetObjectData method should be callable and overridable by derived types.</Description>
   <Resolution Name="Default">Add an implementation of GetObjectData to type {0}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182342.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="60">Error</MessageLevel>
   <File Name="usagerules.dll" Version="17.0.0.0" />
  </Rule>
  <Rule TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100">
   <Name>Review SQL queries for security vulnerabilities</Name>
   <Description>A SQL command string built from user input is vulnerable to SQL injection attacks. Microsoft SQL Server and other database servers support stored procedures and parameterized SQL queries, which reduce the risk of injection attacks.</Description>
   <Resolution Name="WithNonLiterals">The query string passed to {0} in {1} could contain the following variables {2}. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/ms182310.aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="17.0.0.0" />
  </Rule>
 </Rules>
 <Localized>
  <String Key="Category">Category</String>
  <String Key="Certainty">Certainty</String>
  <String Key="CollapseAll">Collapse All</String>
  <String Key="CheckId">Check Id</String>
  <String Key="Error">Error</String>
  <String Key="Errors">error(s)</String>
  <String Key="ExpandAll">Expand All</String>
  <String Key="Help">Help</String>
  <String Key="Line">Line</String>
  <String Key="Messages">message(s)</String>
  <String Key="LocationNotStoredInPdb">[Location not stored in Pdb]</String>
  <String Key="Project">Project</String>
  <String Key="Resolution">Resolution</String>
  <String Key="Rule">Rule</String>
  <String Key="RuleFile">Rule File</String>
  <String Key="RuleDescription">Rule Description</String>
  <String Key="Source">Source</String>
  <String Key="Status">Status</String>
  <String Key="Target">Target</String>
  <String Key="Warning">Warning</String>
  <String Key="Warnings">warning(s)</String>
  <String Key="ReportTitle">Code Analysis Report</String>
 </Localized>
</FxCopReport>
